import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,b as o,a,f as t}from"./app-508cc2d8.js";const c={},d=a("p",null,"记录常用的Linux命令，命令对应的常用参数将用红色标注。",-1),i=t(`<h2 id="关于linux" tabindex="-1"><a class="header-anchor" href="#关于linux" aria-hidden="true">#</a> 关于Linux</h2><p>working on it...</p><h2 id="_1-文件目录操作" tabindex="-1"><a class="header-anchor" href="#_1-文件目录操作" aria-hidden="true">#</a> 1. 文件目录操作</h2><ol><li><p><strong><code>ls</code> 命令</strong></p><p><code>ls &lt;选项&gt; &lt;目录名&gt;</code><br> 查看文件列表、文件信息和文件权限等</p><p>常用参数：</p><blockquote><p><code>-l</code> ：列出长数据串，包含文件的属性与权限数据等<br><code>-a</code> ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）<br><code>-d</code> ：仅列出目录本身，而不是列出目录的文件数据<br><code>-h</code> ：将文件容量以较易读的方式（GB，kB等）列出来<br><code>-R</code> ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出/home目录下所有文件和目录的详细资料</span>
<span class="token function">ls</span> <span class="token parameter variable">-al</span> /home
<span class="token comment"># 列出当前目录下所有以&quot;x&quot;开头的文件目录详情</span>
<span class="token function">ls</span> <span class="token parameter variable">-l</span> x*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例中使用的<code>ls -l x*</code>指令，如果匹配到文件夹，则会默认列出匹配文件夹下的所有文件</p></li><li><p><strong><code>cd</code> 命令</strong></p><p><code>cd &lt;目录名&gt;</code><br> 进入/切换目录</p><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入根目录</span>
<span class="token builtin class-name">cd</span> /
<span class="token comment"># 进入上一级目录</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>pwd</code> 命令</strong></p><p><code>pwd &lt;选项&gt;</code><br> 查看&quot;当前工作目录&quot;的完整路径</p><p>常用参数：</p><blockquote><p><code>-P</code> :显示实际物理路径，而非使用连接（link）路径<br><code>-L</code> :当目录为连接路径时，显示连接路径</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出当前路径，示例输出：/home/root/codes/</span>
<span class="token builtin class-name">pwd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>mkdir</code> 命令</strong></p><p><code>mkdir &lt;选项&gt; &lt;目录名称&gt;</code><br> 创建指定的名称的目录</p><div class="hint-container warning"><p class="hint-container-title">注意</p><ol><li>要求用户在当前路径具有写权限</li><li>不能重复创建目录</li></ol></div><p>常用参数：</p><blockquote><p><code>-m</code>or<code>--mode</code> 设置新创建目录的权限模式，使用八进制表示法(如755)<br><code>-p</code>or<code>--parents</code> 递归地创建目录结构，如果上级目录不存在也会一并创建<br><code>-v</code>or<code>--verbose</code> 每次创建新目录都显示信息<br><code>--help</code> 显示此帮助信息并退出<br><code>--version</code> 输出版本信息并退出</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个空目录</span>
<span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
<span class="token comment"># 递归创建多个目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> test/test1
<span class="token comment"># 创建权限为777的目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-m</span> <span class="token number">777</span> test2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>rm</code> 命令</strong></p><p><code>rm &lt;选项&gt; &lt;目录名称&gt;</code><br> 删除一个目录中的一个或多个文件或目录</p><p>常用参数：</p><blockquote><p><code>-f</code>or<code>--force</code> 强制删除，无需确认<br><code>-i</code>or<code>--interactive</code> 进行交互式删除，输入&#39;y&#39;和&#39;yes&#39;代表确认<br><code>-r</code>or<code>-R</code>or<code>--recursive</code> 递归删除，删除子目录所有内容<br><code>-v</code>or<code>--verbose</code> 详细显示进行的步骤<br><code>--help</code> 显示此帮助信息并退出<br><code>--version</code> 输出版本信息并退出</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除文件test.txt</span>
<span class="token function">rm</span> test.txt
<span class="token comment"># 强制删除某个目录并递归删除其目录下所有内容</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>rmdir</code> 命令</strong></p><div class="hint-container tip"><p class="hint-container-title">建议</p><p>大多数场景下直接使用<code>rm -r </code>可以实现与<code>rmdir</code>同样的功能，并且比<code>rmdir</code>更自由、功能更强大。</p></div><p><code>rmdir &lt;选项&gt; &lt;目录名称&gt;</code><br> 删除目录</p><p>常用参数：</p><blockquote><p><code>-p</code> 递归删除<br><code>-v</code> 显示执行过程</p></blockquote></li><li><p><strong><code>mv</code> 命令</strong></p><p><code>mv &lt;选项&gt; &lt;源文件or目录&gt; &lt;目标文件or目录&gt;</code><br> 移动或将文件夹改名</p><div class="hint-container tip"><p class="hint-container-title">notes</p><p>当第二个参数是文件时，改名；当第二个参数是文件夹时，将源文件移动至目标目录</p></div><p>常用参数：</p><blockquote><p><code>-b</code> 若需覆盖文件，则覆盖前先行备份<br><code>-f</code> force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖<br><code>-i</code> 若目标文件 (destination) 已经存在时，就会询问是否覆盖<br><code>-u</code> 若目标文件已经存在，且 source 比较新，才会更新(update)<br><code>-t</code> --target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将 test1.txt 重命名为 test2.txt</span>
<span class="token function">mv</span> test1.txt test2.txt
<span class="token comment"># 移动文件 test1.txt 到目录 testdir</span>
<span class="token function">mv</span> test1.txt testdir
<span class="token comment"># 移动多个文件</span>
<span class="token comment"># mv test1.txt test2.txt testdir</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>cp</code> 命令</strong></p><p><code>cp &lt;选项&gt; &lt;源文件or目录&gt; &lt;目标文件or目录&gt;</code><br> 复制命令</p><p>常用参数：</p><blockquote><p><code>-b</code> 若需覆盖文件，则覆盖前先行备份<br><code>-f</code> force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖<br><code>-i</code> 若目标文件 (destination) 已经存在时，就会询问是否覆盖<br><code>-u</code> 若目标文件已经存在，且 source 比较新，才会更新(update)<br><code>-t</code> --target-directory=DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 复制test1.txt到testdir</span>
<span class="token function">cp</span> test1.txt testdir
<span class="token comment"># 复制test1目录到testdir目录</span>
<span class="token function">cp</span> <span class="token parameter variable">-a</span> test1 testdir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>touch</code> 命令</strong></p><p><code>touch &lt;选项&gt; &lt;文件&gt;</code><br> 更改文档或目录到日期时间，或创建新文件</p><p>常用参数：</p><blockquote><p><code>-a</code>or<code>--time=atime</code>or<code>--time=access</code>or<code>--time=use</code>  只更改存取时间<br><code>-c</code>or<code>--no-create</code>  不建立任何文档<br><code>-d</code> 使用指定的日期时间，而非现在的时间<br><code>-f</code> 此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题<br><code>-m</code>or<code>--time=mtime</code>or<code>--time=modify</code>  只更改变动时间<br><code>-r</code> 把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同 -t  使用指定的日期时间，而非现在的时间</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建test.txt</span>
<span class="token function">touch</span> test.txt
<span class="token comment"># 将test.txt的时间更新为和test1.txt相同</span>
<span class="token function">touch</span> <span class="token parameter variable">-r</span> test.txt test1.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>cat</code> 命令</strong></p><p><code>cat &lt;选项&gt; &lt;文件&gt;</code><br> 显示文件内容，或将多个文件连接起来显示</p><p>常用参数：</p><blockquote><p><code>-n</code>or<code>--number</code> 对输出的所有行编号,由1开始对所有输出的行数编号</p></blockquote><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将test.log文件的内容加上行号后放进test1.log文件中</span>
<span class="token function">cat</span> <span class="token parameter variable">-n</span> test.log test1.log
<span class="token comment"># 将test.log文件的内容反向显示</span>
<span class="token function">tac</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,4);function l(r,p){return s(),n("div",null,[d,o(" more "),i])}const b=e(c,[["render",l],["__file","linuxCommand.html.vue"]]);export{b as default};
